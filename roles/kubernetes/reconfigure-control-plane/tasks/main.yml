---
- name: Ensure all nodes are in Ready state
  run_once: true
  block:
  - name: Get all node status
    raw: "{{ bin_dir }}/kubectl get nodes --no-headers"
    register: all_nodes_status

  - name: Get all node status different than Ready
    raw: echo "{{ all_nodes_status.stdout }}" | grep -v ' Ready'
    register: nodes_status

  - name: Show not ready nodes
    debug: msg="{{ nodes_status.stdout_lines }}"
    when: nodes_status.stdout != "\r\n"

  - name: Confirm Reconfigure
    pause:
      prompt: "Some nodes are not in Ready state. Type 'yes' to continue with reconfigure"
    register: pause_result
    when: nodes_status.stdout != "\r\n"

  - name: Fail if user does not confirm reconfigure
    fail:
      msg: "Reconfigure control pÄºane will not continue"
    when: pause_result.user_input | default('yes') != 'yes'

- name: Check API is up
  uri:
    url: "https://{{ ip | default(fallback_ips[inventory_hostname]) }}:{{ kube_apiserver_port }}/healthz"
    validate_certs: false
  when: first_master_node
  register: _result
  retries: 60
  delay: 5
  until: _result.status == 200

- name: Check if kubeadm has already run
  stat:
    path: "/var/lib/kubelet/config.yaml"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: kubeadm_already_run

- name: Set reconfig path
  set_fact:
    kube_reconfig_path: "{{ kube_reconfig_dir }}/cluster-config-{{ now(utc=true, fmt='%Y%m%d-%H%M%S') }}.yaml"

- name: Backup Kubernetes configuration files
  archive:
    path: "{{ kube_config_dir }}"
    dest: "{{ kube_config_dir }}/kubernetes-config-{{ ansible_date_time.date }}.tar.gz"
    format: gz

- name: Create backup directory if it doesn't exist
  file:
    path: "{{ kube_reconfig_dir }}"
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Backup ConfigMap
  when: first_master_node
  run_once: true
  raw:  "{{ bin_dir }}/kubectl get cm -n {{ cm_namespace }} {{ cm_name }} -o yaml > {{ kube_reconfig_path }}.bk"
  register: cm_backup
  failed_when: cm_backup.rc != 0

- name: Delete ConfigMap
  when: first_master_node and cm_backup.rc == 0
  run_once: true
  raw: "{{ bin_dir }}/kubectl delete cm -n {{ cm_namespace }} {{ cm_name }}"
  register: cm_delete
  failed_when: cm_delete.rc != 0

- name: Create reconfigure kubeadm config
  template:
    src: "{{ playbook_dir }}/../roles/kubernetes/control-plane/templates/kubeadm-config.v1beta3.yaml.j2"
    dest: "{{ kube_reconfig_path }}"
    mode: "0640"

- name: Fetch kubeadm config to control node
  fetch:
    src: "{{ kube_reconfig_path }}"
    dest: "/tmp/"
    flat: yes

- name: Load kubeadm config
  become: yes
  set_fact:
    cluster_config_manifest: "{{ lookup('file', '/tmp/' + (kube_reconfig_path | basename)) | from_yaml_all | list }}"

- name: Save cluster configuration
  copy:
    content: "{{ cluster_config_manifest | selectattr('kind', 'eq', 'ClusterConfiguration') | first | to_yaml }}"
    dest: "{{ item }}"
  loop:
    - "{{ cm_cluster_config }}"
    - "{{ kube_reconfig_path }}"

- name: Prepare ClusterConfiguration configmap
  run_once: true
  when: first_master_node
  lineinfile:
    path: "{{ cm_cluster_config }}"
    state: absent
    regexp: "{{ item }}"
  loop:
    - "^apiVersion:"
    - "^kind: ClusterConfiguration"

- name: Create new configmap for ClusterConfiguration
  raw: "{{ bin_dir }}/kubectl create configmap -n {{ cm_namespace }} {{ cm_name }} --from-file=ClusterConfiguration={{ cm_cluster_config }}"
  run_once: true
  when: first_master_node

- name: Reconfigure control-plane
  when:
    - kubeadm_already_run.stat.exists
  run_once: true
  # We'll iterate over each node in the kube_control_plane group:
  loop: "{{ groups['kube_control_plane'] }}"
  loop_control:
    loop_var: cp_node
  include_tasks: reconfigure_block.yml
